name: Deploy Docker Image to ECR and ECS


# CI workflow 완료 시 트리거
on:
  workflow_run:
    workflows: [ "Build and Test" ]
    types:
      - completed


env:
  MYSQL_URL: ${{ secrets.PROD_MYSQL_URL }}
  MYSQL_USERNAME: ${{ secrets.PROD_MYSQL_USERNAME }}
  MYSQL_PASSWORD: ${{ secrets.PROD_MYSQL_PASSWORD }}
  KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
  KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
  SECURITY_SECRET_KEY: ${{ secrets.SECURITY_SECRET_KEY }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: urlib/urlib_backend
  ECS_SERVICE: urlib_backend_service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: urlib_ecs_deploy                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/ecs-task.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: urlib_backend          # set this to the name of the container in the

jobs:
  deploy:

    # 조건 : CI가 통과해야하고 트리거는 push여야 한다.
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'push'
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle (prod profile)
        run: ./gradlew clean build -Dspring.profiles.active=prod -Dfile.encoding=UTF-8 -Duser.language=ko -Duser.country=KR
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}          # ECR 접근 가능 key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            MYSQL_URL=${{ env.MYSQL_URL }}
            MYSQL_USERNAME=${{ env.MYSQL_USERNAME }}
            MYSQL_PASSWORD=${{ env.MYSQL_PASSWORD }}
            KAKAO_CLIENT_ID=${{ env.KAKAO_CLIENT_ID }}
            KAKAO_CLIENT_SECRET=${{ env.KAKAO_CLIENT_SECRET }}
            SECURITY_SECRET_KEY=${{ env.SECURITY_SECRET_KEY }}
            REDIS_HOST=${{ env.REDIS_HOST }}
            REDIS_PORT=${{ env.REDIS_PORT }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
